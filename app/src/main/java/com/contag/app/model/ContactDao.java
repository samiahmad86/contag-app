
package com.contag.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.contag.app.model.Contact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT".
*/
public class ContactDao extends AbstractDao<Contact, Long> {

    public static final String TABLENAME = "CONTACT";

    /**
     * Properties of entity Contact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CreatedOn = new Property(1, String.class, "createdOn", false, "CREATED_ON");
        public final static Property UpdatedOn = new Property(2, String.class, "updatedOn", false, "UPDATED_ON");
        public final static Property ContactName = new Property(3, String.class, "contactName", false, "CONTACT_NAME");
        public final static Property ContactNumber = new Property(4, String.class, "contactNumber", false, "CONTACT_NUMBER");
        public final static Property InvitedOn = new Property(5, String.class, "invitedOn", false, "INVITED_ON");
        public final static Property IsOnContag = new Property(6, Boolean.class, "isOnContag", false, "IS_ON_CONTAG");
        public final static Property IsMuted = new Property(7, Boolean.class, "isMuted", false, "IS_MUTED");
        public final static Property IsBlocked = new Property(8, Boolean.class, "isBlocked", false, "IS_BLOCKED");
        public final static Property IsInvited = new Property(9, Boolean.class, "isInvited", false, "IS_INVITED");
    };


    public ContactDao(DaoConfig config) {
        super(config);
    }
    
    public ContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CREATED_ON\" TEXT," + // 1: createdOn
                "\"UPDATED_ON\" TEXT," + // 2: updatedOn
                "\"CONTACT_NAME\" TEXT," + // 3: contactName
                "\"CONTACT_NUMBER\" TEXT," + // 4: contactNumber
                "\"INVITED_ON\" TEXT," + // 5: invitedOn
                "\"IS_ON_CONTAG\" INTEGER," + // 6: isOnContag
                "\"IS_MUTED\" INTEGER," + // 7: isMuted
                "\"IS_BLOCKED\" INTEGER," + // 8: isBlocked
                "\"IS_INVITED\" INTEGER);"); // 9: isInvited
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String createdOn = entity.getCreatedOn();
        if (createdOn != null) {
            stmt.bindString(2, createdOn);
        }
 
        String updatedOn = entity.getUpdatedOn();
        if (updatedOn != null) {
            stmt.bindString(3, updatedOn);
        }
 
        String contactName = entity.getContactName();
        if (contactName != null) {
            stmt.bindString(4, contactName);
        }
 
        String contactNumber = entity.getContactNumber();
        if (contactNumber != null) {
            stmt.bindString(5, contactNumber);
        }
 
        String invitedOn = entity.getInvitedOn();
        if (invitedOn != null) {
            stmt.bindString(6, invitedOn);
        }
 
        Boolean isOnContag = entity.getIsOnContag();
        if (isOnContag != null) {
            stmt.bindLong(7, isOnContag ? 1L: 0L);
        }
 
        Boolean isMuted = entity.getIsMuted();
        if (isMuted != null) {
            stmt.bindLong(8, isMuted ? 1L: 0L);
        }
 
        Boolean isBlocked = entity.getIsBlocked();
        if (isBlocked != null) {
            stmt.bindLong(9, isBlocked ? 1L: 0L);
        }
 
        Boolean isInvited = entity.getIsInvited();
        if (isInvited != null) {
            stmt.bindLong(10, isInvited ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Contact readEntity(Cursor cursor, int offset) {
        Contact entity = new Contact( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // createdOn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // updatedOn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contactName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // contactNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // invitedOn
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isOnContag
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isMuted
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isBlocked
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // isInvited
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Contact entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreatedOn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpdatedOn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContactName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContactNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInvitedOn(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsOnContag(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setIsMuted(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setIsBlocked(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsInvited(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Contact entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Contact entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
