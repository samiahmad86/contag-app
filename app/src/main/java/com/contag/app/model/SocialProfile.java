package com.contag.app.model;

import com.contag.app.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "SOCIAL_PROFILE".
 */
public class SocialProfile {

    private Long id;
    private String social_platform;
    private String platform_id;
    private String platform_username;
    private Long contagUserId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SocialProfileDao myDao;

    private ContagContag contagContag;
    private Long contagContag__resolvedKey;


    public SocialProfile() {
    }

    public SocialProfile(Long id) {
        this.id = id;
    }

    public SocialProfile(Long id, String social_platform, String platform_id, String platform_username, Long contagUserId) {
        this.id = id;
        this.social_platform = social_platform;
        this.platform_id = platform_id;
        this.platform_username = platform_username;
        this.contagUserId = contagUserId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSocialProfileDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSocial_platform() {
        return social_platform;
    }

    public void setSocial_platform(String social_platform) {
        this.social_platform = social_platform;
    }

    public String getPlatform_id() {
        return platform_id;
    }

    public void setPlatform_id(String platform_id) {
        this.platform_id = platform_id;
    }

    public String getPlatform_username() {
        return platform_username;
    }

    public void setPlatform_username(String platform_username) {
        this.platform_username = platform_username;
    }

    public Long getContagUserId() {
        return contagUserId;
    }

    public void setContagUserId(Long contagUserId) {
        this.contagUserId = contagUserId;
    }

    /** To-one relationship, resolved on first access. */
    public ContagContag getContagContag() {
        Long __key = this.contagUserId;
        if (contagContag__resolvedKey == null || !contagContag__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContagContagDao targetDao = daoSession.getContagContagDao();
            ContagContag contagContagNew = targetDao.load(__key);
            synchronized (this) {
                contagContag = contagContagNew;
            	contagContag__resolvedKey = __key;
            }
        }
        return contagContag;
    }

    public void setContagContag(ContagContag contagContag) {
        synchronized (this) {
            this.contagContag = contagContag;
            contagUserId = contagContag == null ? null : contagContag.getId();
            contagContag__resolvedKey = contagUserId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
