package com.contag.app.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.contag.app.model.CustomShare;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUSTOM_SHARE".
*/
public class CustomShareDao extends AbstractDao<CustomShare, Void> {

    public static final String TABLENAME = "CUSTOM_SHARE";

    /**
     * Properties of entity CustomShare.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Field_name = new Property(0, String.class, "field_name", false, "FIELD_NAME");
        public final static Property User_ids = new Property(1, String.class, "user_ids", false, "USER_IDS");
        public final static Property Is_public = new Property(2, Boolean.class, "is_public", false, "IS_PUBLIC");
        public final static Property Is_private = new Property(3, Boolean.class, "is_private", false, "IS_PRIVATE");
        public final static Property UserID = new Property(4, Long.class, "userID", false, "USER_ID");
    };

    private DaoSession daoSession;


    public CustomShareDao(DaoConfig config) {
        super(config);
    }
    
    public CustomShareDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOM_SHARE\" (" + //
                "\"FIELD_NAME\" TEXT," + // 0: field_name
                "\"USER_IDS\" TEXT," + // 1: user_ids
                "\"IS_PUBLIC\" INTEGER," + // 2: is_public
                "\"IS_PRIVATE\" INTEGER," + // 3: is_private
                "\"USER_ID\" INTEGER);"); // 4: userID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOM_SHARE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CustomShare entity) {
        stmt.clearBindings();
 
        String field_name = entity.getField_name();
        if (field_name != null) {
            stmt.bindString(1, field_name);
        }
 
        String user_ids = entity.getUser_ids();
        if (user_ids != null) {
            stmt.bindString(2, user_ids);
        }
 
        Boolean is_public = entity.getIs_public();
        if (is_public != null) {
            stmt.bindLong(3, is_public ? 1L: 0L);
        }
 
        Boolean is_private = entity.getIs_private();
        if (is_private != null) {
            stmt.bindLong(4, is_private ? 1L: 0L);
        }
 
        Long userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(5, userID);
        }
    }

    @Override
    protected void attachEntity(CustomShare entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public CustomShare readEntity(Cursor cursor, int offset) {
        CustomShare entity = new CustomShare( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // field_name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_ids
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // is_public
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // is_private
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // userID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CustomShare entity, int offset) {
        entity.setField_name(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUser_ids(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIs_public(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setIs_private(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setUserID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(CustomShare entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(CustomShare entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getContagContagDao().getAllColumns());
            builder.append(" FROM CUSTOM_SHARE T");
            builder.append(" LEFT JOIN CONTAG_CONTAG T0 ON T.\"USER_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CustomShare loadCurrentDeep(Cursor cursor, boolean lock) {
        CustomShare entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ContagContag contagContag = loadCurrentOther(daoSession.getContagContagDao(), cursor, offset);
        entity.setContagContag(contagContag);

        return entity;    
    }

    public CustomShare loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CustomShare> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CustomShare> list = new ArrayList<CustomShare>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CustomShare> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CustomShare> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
