package com.contag.app.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.contag.app.model.ContagContag;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTAG_CONTAG".
*/
public class ContagContagDao extends AbstractDao<ContagContag, Long> {

    public static final String TABLENAME = "CONTAG_CONTAG";

    /**
     * Properties of entity ContagContag.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CreatedOn = new Property(1, String.class, "createdOn", false, "CREATED_ON");
        public final static Property UpdatedOn = new Property(2, String.class, "updatedOn", false, "UPDATED_ON");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property MobileNumber = new Property(4, String.class, "mobileNumber", false, "MOBILE_NUMBER");
        public final static Property RegisteredWith = new Property(5, String.class, "registeredWith", false, "REGISTERED_WITH");
        public final static Property Contag = new Property(6, String.class, "contag", false, "CONTAG");
        public final static Property LandLineNumber = new Property(7, String.class, "landLineNumber", false, "LAND_LINE_NUMBER");
        public final static Property EmergencyContactNumber = new Property(8, String.class, "emergencyContactNumber", false, "EMERGENCY_CONTACT_NUMBER");
        public final static Property IsMobileVerified = new Property(9, Boolean.class, "isMobileVerified", false, "IS_MOBILE_VERIFIED");
        public final static Property Gender = new Property(10, String.class, "gender", false, "GENDER");
        public final static Property PersonalEmail = new Property(11, String.class, "personalEmail", false, "PERSONAL_EMAIL");
        public final static Property Address = new Property(12, String.class, "address", false, "ADDRESS");
        public final static Property WorkEmail = new Property(13, String.class, "workEmail", false, "WORK_EMAIL");
        public final static Property WorkMobileNumber = new Property(14, String.class, "workMobileNumber", false, "WORK_MOBILE_NUMBER");
        public final static Property WorkLandLineNumber = new Property(15, String.class, "workLandLineNumber", false, "WORK_LAND_LINE_NUMBER");
        public final static Property WorkAddress = new Property(16, String.class, "workAddress", false, "WORK_ADDRESS");
        public final static Property Website = new Property(17, String.class, "website", false, "WEBSITE");
        public final static Property Designation = new Property(18, String.class, "designation", false, "DESIGNATION");
        public final static Property WorkFacebookPage = new Property(19, String.class, "workFacebookPage", false, "WORK_FACEBOOK_PAGE");
        public final static Property AndroidAppLink = new Property(20, String.class, "androidAppLink", false, "ANDROID_APP_LINK");
        public final static Property IosAppLink = new Property(21, String.class, "iosAppLink", false, "IOS_APP_LINK");
        public final static Property AvatarUrl = new Property(22, String.class, "avatarUrl", false, "AVATAR_URL");
        public final static Property BloodGroup = new Property(23, String.class, "bloodGroup", false, "BLOOD_GROUP");
        public final static Property DateOfBirth = new Property(24, String.class, "dateOfBirth", false, "DATE_OF_BIRTH");
        public final static Property MaritalStatus = new Property(25, String.class, "maritalStatus", false, "MARITAL_STATUS");
        public final static Property MarriageAnniversary = new Property(26, String.class, "marriageAnniversary", false, "MARRIAGE_ANNIVERSARY");
        public final static Property Status_update = new Property(27, String.class, "status_update", false, "STATUS_UPDATE");
        public final static Property Is_contact = new Property(28, Boolean.class, "is_contact", false, "IS_CONTACT");
        public final static Property CompanyName = new Property(29, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property ContactId = new Property(30, Long.class, "contactId", false, "CONTACT_ID");
    };

    private DaoSession daoSession;


    public ContagContagDao(DaoConfig config) {
        super(config);
    }
    
    public ContagContagDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTAG_CONTAG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CREATED_ON\" TEXT," + // 1: createdOn
                "\"UPDATED_ON\" TEXT," + // 2: updatedOn
                "\"NAME\" TEXT," + // 3: name
                "\"MOBILE_NUMBER\" TEXT," + // 4: mobileNumber
                "\"REGISTERED_WITH\" TEXT," + // 5: registeredWith
                "\"CONTAG\" TEXT," + // 6: contag
                "\"LAND_LINE_NUMBER\" TEXT," + // 7: landLineNumber
                "\"EMERGENCY_CONTACT_NUMBER\" TEXT," + // 8: emergencyContactNumber
                "\"IS_MOBILE_VERIFIED\" INTEGER," + // 9: isMobileVerified
                "\"GENDER\" TEXT," + // 10: gender
                "\"PERSONAL_EMAIL\" TEXT," + // 11: personalEmail
                "\"ADDRESS\" TEXT," + // 12: address
                "\"WORK_EMAIL\" TEXT," + // 13: workEmail
                "\"WORK_MOBILE_NUMBER\" TEXT," + // 14: workMobileNumber
                "\"WORK_LAND_LINE_NUMBER\" TEXT," + // 15: workLandLineNumber
                "\"WORK_ADDRESS\" TEXT," + // 16: workAddress
                "\"WEBSITE\" TEXT," + // 17: website
                "\"DESIGNATION\" TEXT," + // 18: designation
                "\"WORK_FACEBOOK_PAGE\" TEXT," + // 19: workFacebookPage
                "\"ANDROID_APP_LINK\" TEXT," + // 20: androidAppLink
                "\"IOS_APP_LINK\" TEXT," + // 21: iosAppLink
                "\"AVATAR_URL\" TEXT," + // 22: avatarUrl
                "\"BLOOD_GROUP\" TEXT," + // 23: bloodGroup
                "\"DATE_OF_BIRTH\" TEXT," + // 24: dateOfBirth
                "\"MARITAL_STATUS\" TEXT," + // 25: maritalStatus
                "\"MARRIAGE_ANNIVERSARY\" TEXT," + // 26: marriageAnniversary
                "\"STATUS_UPDATE\" TEXT," + // 27: status_update
                "\"IS_CONTACT\" INTEGER," + // 28: is_contact
                "\"COMPANY_NAME\" TEXT," + // 29: companyName
                "\"CONTACT_ID\" INTEGER);"); // 30: contactId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTAG_CONTAG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ContagContag entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String createdOn = entity.getCreatedOn();
        if (createdOn != null) {
            stmt.bindString(2, createdOn);
        }
 
        String updatedOn = entity.getUpdatedOn();
        if (updatedOn != null) {
            stmt.bindString(3, updatedOn);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String mobileNumber = entity.getMobileNumber();
        if (mobileNumber != null) {
            stmt.bindString(5, mobileNumber);
        }
 
        String registeredWith = entity.getRegisteredWith();
        if (registeredWith != null) {
            stmt.bindString(6, registeredWith);
        }
 
        String contag = entity.getContag();
        if (contag != null) {
            stmt.bindString(7, contag);
        }
 
        String landLineNumber = entity.getLandLineNumber();
        if (landLineNumber != null) {
            stmt.bindString(8, landLineNumber);
        }
 
        String emergencyContactNumber = entity.getEmergencyContactNumber();
        if (emergencyContactNumber != null) {
            stmt.bindString(9, emergencyContactNumber);
        }
 
        Boolean isMobileVerified = entity.getIsMobileVerified();
        if (isMobileVerified != null) {
            stmt.bindLong(10, isMobileVerified ? 1L: 0L);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(11, gender);
        }
 
        String personalEmail = entity.getPersonalEmail();
        if (personalEmail != null) {
            stmt.bindString(12, personalEmail);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(13, address);
        }
 
        String workEmail = entity.getWorkEmail();
        if (workEmail != null) {
            stmt.bindString(14, workEmail);
        }
 
        String workMobileNumber = entity.getWorkMobileNumber();
        if (workMobileNumber != null) {
            stmt.bindString(15, workMobileNumber);
        }
 
        String workLandLineNumber = entity.getWorkLandLineNumber();
        if (workLandLineNumber != null) {
            stmt.bindString(16, workLandLineNumber);
        }
 
        String workAddress = entity.getWorkAddress();
        if (workAddress != null) {
            stmt.bindString(17, workAddress);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(18, website);
        }
 
        String designation = entity.getDesignation();
        if (designation != null) {
            stmt.bindString(19, designation);
        }
 
        String workFacebookPage = entity.getWorkFacebookPage();
        if (workFacebookPage != null) {
            stmt.bindString(20, workFacebookPage);
        }
 
        String androidAppLink = entity.getAndroidAppLink();
        if (androidAppLink != null) {
            stmt.bindString(21, androidAppLink);
        }
 
        String iosAppLink = entity.getIosAppLink();
        if (iosAppLink != null) {
            stmt.bindString(22, iosAppLink);
        }
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(23, avatarUrl);
        }
 
        String bloodGroup = entity.getBloodGroup();
        if (bloodGroup != null) {
            stmt.bindString(24, bloodGroup);
        }
 
        String dateOfBirth = entity.getDateOfBirth();
        if (dateOfBirth != null) {
            stmt.bindString(25, dateOfBirth);
        }
 
        String maritalStatus = entity.getMaritalStatus();
        if (maritalStatus != null) {
            stmt.bindString(26, maritalStatus);
        }
 
        String marriageAnniversary = entity.getMarriageAnniversary();
        if (marriageAnniversary != null) {
            stmt.bindString(27, marriageAnniversary);
        }
 
        String status_update = entity.getStatus_update();
        if (status_update != null) {
            stmt.bindString(28, status_update);
        }
 
        Boolean is_contact = entity.getIs_contact();
        if (is_contact != null) {
            stmt.bindLong(29, is_contact ? 1L: 0L);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(30, companyName);
        }
 
        Long contactId = entity.getContactId();
        if (contactId != null) {
            stmt.bindLong(31, contactId);
        }
    }

    @Override
    protected void attachEntity(ContagContag entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ContagContag readEntity(Cursor cursor, int offset) {
        ContagContag entity = new ContagContag( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // createdOn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // updatedOn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobileNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // registeredWith
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // landLineNumber
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // emergencyContactNumber
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isMobileVerified
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // gender
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // personalEmail
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // address
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // workEmail
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // workMobileNumber
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // workLandLineNumber
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // workAddress
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // website
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // designation
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // workFacebookPage
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // androidAppLink
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // iosAppLink
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // avatarUrl
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // bloodGroup
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // dateOfBirth
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // maritalStatus
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // marriageAnniversary
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // status_update
            cursor.isNull(offset + 28) ? null : cursor.getShort(offset + 28) != 0, // is_contact
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // companyName
            cursor.isNull(offset + 30) ? null : cursor.getLong(offset + 30) // contactId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ContagContag entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreatedOn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpdatedOn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMobileNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRegisteredWith(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLandLineNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEmergencyContactNumber(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsMobileVerified(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setGender(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPersonalEmail(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddress(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setWorkEmail(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setWorkMobileNumber(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setWorkLandLineNumber(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setWorkAddress(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setWebsite(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDesignation(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setWorkFacebookPage(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAndroidAppLink(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setIosAppLink(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setAvatarUrl(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setBloodGroup(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDateOfBirth(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setMaritalStatus(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setMarriageAnniversary(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setStatus_update(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setIs_contact(cursor.isNull(offset + 28) ? null : cursor.getShort(offset + 28) != 0);
        entity.setCompanyName(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setContactId(cursor.isNull(offset + 30) ? null : cursor.getLong(offset + 30));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ContagContag entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ContagContag entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getContactDao().getAllColumns());
            builder.append(" FROM CONTAG_CONTAG T");
            builder.append(" LEFT JOIN CONTACT T0 ON T.\"CONTACT_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ContagContag loadCurrentDeep(Cursor cursor, boolean lock) {
        ContagContag entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Contact contact = loadCurrentOther(daoSession.getContactDao(), cursor, offset);
        entity.setContact(contact);

        return entity;    
    }

    public ContagContag loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ContagContag> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ContagContag> list = new ArrayList<ContagContag>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ContagContag> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ContagContag> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
