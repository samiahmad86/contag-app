package com.contag.app.model;

import com.contag.app.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CONTAG_CONTAG".
 */
public class ContagContag {

    private Long id;
    private String createdOn;
    private String updatedOn;
    private String name;
    private String mobileNumber;
    private String registeredWith;
    private String contag;
    private String landLineNumber;
    private String emergencyContactNumber;
    private Boolean isMobileVerified;
    private String gender;
    private String personalEmail;
    private String address;
    private String workEmail;
    private String workMobileNumber;
    private String workLandLineNumber;
    private String workAddress;
    private String website;
    private String designation;
    private String workFacebookPage;
    private String androidAppLink;
    private String iosAppLink;
    private String avatarUrl;
    private String bloodGroup;
    private String dateOfBirth;
    private String maritalStatus;
    private String marriageAnniversary;
    private String status_update;
    private Long contactId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ContagContagDao myDao;

    private Contact contact;
    private Long contact__resolvedKey;


    public ContagContag() {
    }

    public ContagContag(Long id) {
        this.id = id;
    }

    public ContagContag(Long id, String createdOn, String updatedOn, String name, String mobileNumber, String registeredWith, String contag, String landLineNumber, String emergencyContactNumber, Boolean isMobileVerified, String gender, String personalEmail, String address, String workEmail, String workMobileNumber, String workLandLineNumber, String workAddress, String website, String designation, String workFacebookPage, String androidAppLink, String iosAppLink, String avatarUrl, String bloodGroup, String dateOfBirth, String maritalStatus, String marriageAnniversary, String status_update, Long contactId) {
        this.id = id;
        this.createdOn = createdOn;
        this.updatedOn = updatedOn;
        this.name = name;
        this.mobileNumber = mobileNumber;
        this.registeredWith = registeredWith;
        this.contag = contag;
        this.landLineNumber = landLineNumber;
        this.emergencyContactNumber = emergencyContactNumber;
        this.isMobileVerified = isMobileVerified;
        this.gender = gender;
        this.personalEmail = personalEmail;
        this.address = address;
        this.workEmail = workEmail;
        this.workMobileNumber = workMobileNumber;
        this.workLandLineNumber = workLandLineNumber;
        this.workAddress = workAddress;
        this.website = website;
        this.designation = designation;
        this.workFacebookPage = workFacebookPage;
        this.androidAppLink = androidAppLink;
        this.iosAppLink = iosAppLink;
        this.avatarUrl = avatarUrl;
        this.bloodGroup = bloodGroup;
        this.dateOfBirth = dateOfBirth;
        this.maritalStatus = maritalStatus;
        this.marriageAnniversary = marriageAnniversary;
        this.status_update = status_update;
        this.contactId = contactId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getContagContagDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCreatedOn() {
        return createdOn;
    }

    public void setCreatedOn(String createdOn) {
        this.createdOn = createdOn;
    }

    public String getUpdatedOn() {
        return updatedOn;
    }

    public void setUpdatedOn(String updatedOn) {
        this.updatedOn = updatedOn;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getMobileNumber() {
        return mobileNumber;
    }

    public void setMobileNumber(String mobileNumber) {
        this.mobileNumber = mobileNumber;
    }

    public String getRegisteredWith() {
        return registeredWith;
    }

    public void setRegisteredWith(String registeredWith) {
        this.registeredWith = registeredWith;
    }

    public String getContag() {
        return contag;
    }

    public void setContag(String contag) {
        this.contag = contag;
    }

    public String getLandLineNumber() {
        return landLineNumber;
    }

    public void setLandLineNumber(String landLineNumber) {
        this.landLineNumber = landLineNumber;
    }

    public String getEmergencyContactNumber() {
        return emergencyContactNumber;
    }

    public void setEmergencyContactNumber(String emergencyContactNumber) {
        this.emergencyContactNumber = emergencyContactNumber;
    }

    public Boolean getIsMobileVerified() {
        return isMobileVerified;
    }

    public void setIsMobileVerified(Boolean isMobileVerified) {
        this.isMobileVerified = isMobileVerified;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public String getPersonalEmail() {
        return personalEmail;
    }

    public void setPersonalEmail(String personalEmail) {
        this.personalEmail = personalEmail;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getWorkEmail() {
        return workEmail;
    }

    public void setWorkEmail(String workEmail) {
        this.workEmail = workEmail;
    }

    public String getWorkMobileNumber() {
        return workMobileNumber;
    }

    public void setWorkMobileNumber(String workMobileNumber) {
        this.workMobileNumber = workMobileNumber;
    }

    public String getWorkLandLineNumber() {
        return workLandLineNumber;
    }

    public void setWorkLandLineNumber(String workLandLineNumber) {
        this.workLandLineNumber = workLandLineNumber;
    }

    public String getWorkAddress() {
        return workAddress;
    }

    public void setWorkAddress(String workAddress) {
        this.workAddress = workAddress;
    }

    public String getWebsite() {
        return website;
    }

    public void setWebsite(String website) {
        this.website = website;
    }

    public String getDesignation() {
        return designation;
    }

    public void setDesignation(String designation) {
        this.designation = designation;
    }

    public String getWorkFacebookPage() {
        return workFacebookPage;
    }

    public void setWorkFacebookPage(String workFacebookPage) {
        this.workFacebookPage = workFacebookPage;
    }

    public String getAndroidAppLink() {
        return androidAppLink;
    }

    public void setAndroidAppLink(String androidAppLink) {
        this.androidAppLink = androidAppLink;
    }

    public String getIosAppLink() {
        return iosAppLink;
    }

    public void setIosAppLink(String iosAppLink) {
        this.iosAppLink = iosAppLink;
    }

    public String getAvatarUrl() {
        return avatarUrl;
    }

    public void setAvatarUrl(String avatarUrl) {
        this.avatarUrl = avatarUrl;
    }

    public String getBloodGroup() {
        return bloodGroup;
    }

    public void setBloodGroup(String bloodGroup) {
        this.bloodGroup = bloodGroup;
    }

    public String getDateOfBirth() {
        return dateOfBirth;
    }

    public void setDateOfBirth(String dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    public String getMaritalStatus() {
        return maritalStatus;
    }

    public void setMaritalStatus(String maritalStatus) {
        this.maritalStatus = maritalStatus;
    }

    public String getMarriageAnniversary() {
        return marriageAnniversary;
    }

    public void setMarriageAnniversary(String marriageAnniversary) {
        this.marriageAnniversary = marriageAnniversary;
    }

    public String getStatus_update() {
        return status_update;
    }

    public void setStatus_update(String status_update) {
        this.status_update = status_update;
    }

    public Long getContactId() {
        return contactId;
    }

    public void setContactId(Long contactId) {
        this.contactId = contactId;
    }

    /** To-one relationship, resolved on first access. */
    public Contact getContact() {
        Long __key = this.contactId;
        if (contact__resolvedKey == null || !contact__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactDao targetDao = daoSession.getContactDao();
            Contact contactNew = targetDao.load(__key);
            synchronized (this) {
                contact = contactNew;
            	contact__resolvedKey = __key;
            }
        }
        return contact;
    }

    public void setContact(Contact contact) {
        synchronized (this) {
            this.contact = contact;
            contactId = contact == null ? null : contact.getId();
            contact__resolvedKey = contactId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
